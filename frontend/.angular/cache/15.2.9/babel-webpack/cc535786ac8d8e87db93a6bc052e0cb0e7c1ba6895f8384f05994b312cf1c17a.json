{"ast":null,"code":"import { HttpClient } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nvar ClienteService = /** @class */function () {\n  function ClienteService(http) {\n    this.http = http;\n    this.apiUrl = '/api/client';\n  }\n  ClienteService.prototype.handleError = function (error) {\n    if (error.error.errors) {\n      var mongoErrors = error.error.errors;\n      var message = '';\n      for (var key in mongoErrors) {\n        if (mongoErrors.hasOwnProperty(key)) {\n          message = \"MongoDB error at field \".concat(key, \": \").concat(mongoErrors[key].message);\n          break;\n        }\n      }\n      return throwError(message);\n    } else if (error.error.message) {\n      return throwError(error.error.message);\n    } else if (error.error instanceof ErrorEvent) {\n      // A client-side or network error occurred. Handle it accordingly.\n      console.error('An error occurred:', error.error.message);\n    } else {\n      // The backend returned an unsuccessful response code.\n      // The response body may contain clues as to what went wrong,\n      console.error(\"Backend returned code \".concat(error.status, \", \") + \"body was: \".concat(error.error));\n    }\n    // return an observable with a user-facing error message\n    return throwError('Something bad happened; please try again later.');\n  };\n  ClienteService.prototype.save = function (cliente) {\n    return this.http.post(this.apiUrl, cliente).pipe(catchError(this.handleError));\n  };\n  ClienteService.prototype.update = function (id, cliente) {\n    return this.http.put(this.apiUrl + '/' + id, cliente).pipe(catchError(this.handleError));\n  };\n  ClienteService.prototype.getAll = function () {\n    return this.http.get(this.apiUrl);\n  };\n  ClienteService.prototype.getById = function (id) {\n    return this.http.get(this.apiUrl + '/' + id);\n  };\n  ClienteService.prototype.delete = function (id) {\n    return this.http.delete(this.apiUrl + '/' + id);\n  };\n  ClienteService.ɵfac = function ClienteService_Factory(t) {\n    return new (t || ClienteService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  ClienteService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ClienteService,\n    factory: ClienteService.ɵfac\n  });\n  return ClienteService;\n}();\nexport { ClienteService };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}